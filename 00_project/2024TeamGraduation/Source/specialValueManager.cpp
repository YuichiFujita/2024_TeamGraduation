//=============================================================================
// 
// スペシャル値マネージャ処理 [specialValueManager.cpp]
// Author : Kai Takada
// 
//=============================================================================
#include "specialValueManager.h"
#include "manager.h"

//==========================================================================
// 定数定義
//==========================================================================
namespace
{
	const float ADDVALUE[CSpecialValueManager::ETypeAdd::ADD_MAX] =	// 加算量
	{
		0.002f,	// 常に
		2.0f,	// ヒット
		2.0f,	// キャッチ
		5.0f,	// ジャストキャッチ
		2.0f,	// カバーキャッチ
		8.0f,	// 回避
		20.0f,	// スペシャルをキャッチした
	};
}

//==========================================================================
// 静的メンバ変数
//==========================================================================
CSpecialValueManager* CSpecialValueManager::m_pThisPtr = nullptr;	// 自身のポインタ

//==========================================================================
// コンストラクタ
//==========================================================================
CSpecialValueManager::CSpecialValueManager()
{
	
}

//==========================================================================
// デストラクタ
//==========================================================================
CSpecialValueManager::~CSpecialValueManager()
{

}

//==========================================================================
// 生成処理
//==========================================================================
CSpecialValueManager* CSpecialValueManager::Create()
{
	if (m_pThisPtr != nullptr)
	{// 既にある場合
		return m_pThisPtr;
	}

	// メモリの確保
	m_pThisPtr = DEBUG_NEW CSpecialValueManager;

	if (m_pThisPtr != nullptr)
	{
		// 初期化処理
		m_pThisPtr->Init();
	}

	return m_pThisPtr;
}

//==========================================================================
// 初期化処理
//==========================================================================
HRESULT CSpecialValueManager::Init()
{
	for (int i = 0; i < CSpecialValueManager::ETypeAdd::ADD_MAX; i++)
	{
		m_fAddValue[i] = ADDVALUE[i];
	}
	
	return S_OK;
}

//==========================================================================
// 終了処理
//==========================================================================
void CSpecialValueManager::Uninit()
{
	delete m_pThisPtr;
	m_pThisPtr = nullptr;
}

//==========================================================================
// 加算量取得
//==========================================================================
float CSpecialValueManager::GetAddValue(ETypeAdd type)
{
	// 範囲外
	if (ETypeAdd::ADD_MAX <= type) return 0.0f;

	return m_fAddValue[type];
}
