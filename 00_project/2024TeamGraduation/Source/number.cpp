//==========================================================================
// 
//  数字処理 [number.cpp]
//  Author : 相馬 靜雅
// 
//==========================================================================
#include "number.h"

// 派生先
#include "number_2D.h"
#include "number_3D.h"
#include "number_Billboard.h"

//==========================================================================
// 定数定義
//==========================================================================
namespace
{
	
}

//==========================================================================
// 静的メンバ変数
//==========================================================================


//==========================================================================
// コンストラクタ
//==========================================================================
CNumber::CNumber(int nPriority, const LAYER layer) : CObject(nPriority, layer)
{

}

//==========================================================================
// デストラクタ
//==========================================================================
CNumber::~CNumber()
{

}

//==========================================================================
// 生成処理
//==========================================================================
CNumber* CNumber::Create(CMultiNumber::EObjType type, int nPriority)
{
	// メモリの確保
	CNumber* pNumber = nullptr;

	switch (type)
	{
	case CMultiNumber::OBJTYPE_2D:
		pNumber = DEBUG_NEW CNumber2D(nPriority);
		break;

	case CMultiNumber::OBJTYPE_3D:
		pNumber = DEBUG_NEW CNumber3D(nPriority);
		break;

	case CMultiNumber::OBJTYPE_BILLBOARD:
		pNumber = DEBUG_NEW CNumberBillboard(nPriority);
		break;

	default:
		assert(false);
		break;
	}

	if (pNumber != nullptr)
	{
		// クラスの初期化
		if (FAILED(pNumber->Init()))
		{ // 初期化に失敗した場合

			// クラスの終了
			SAFE_UNINIT(pNumber);
			return nullptr;
		}
	}

	return pNumber;
}

//==========================================================================
// 初期化処理
//==========================================================================
HRESULT CNumber::Init()
{
	// 種類設定
	SetType(CObject::TYPE::TYPE_NUMBER);
	return S_OK;
}

//==========================================================================
// 終了処理
//==========================================================================
void CNumber::Uninit()
{
	// オブジェクトの破棄
	Release();
}

//==========================================================================
// 削除処理
//==========================================================================
void CNumber::Kill()
{
	// 自身の終了
	Uninit();
}

//==========================================================================
// 更新処理
//==========================================================================
void CNumber::Update(const float fDeltaTime, const float fDeltaRate, const float fSlowRate)
{
	
}

//==========================================================================
// 描画処理
//==========================================================================
void CNumber::Draw()
{

}
