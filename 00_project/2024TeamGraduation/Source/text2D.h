//============================================================
//
//	テキスト2Dヘッダー [text2D.h]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	二重インクルード防止
//************************************************************
#ifndef _TEXT2D_H_
#define _TEXT2D_H_

//************************************************************
//	インクルードファイル
//************************************************************
#include "object.h"
#include "string2D.h"

//************************************************************
//	インクルードファイル
//************************************************************
class CFontChar;	// フォント文字クラス

//************************************************************
//	クラス定義
//************************************************************
// テキスト2Dクラス
class CText2D : public CObject
{
public:
	// コンストラクタ
	CText2D();

	// デストラクタ
	~CText2D() override;

	// オーバーライド関数
	HRESULT Init() override;	// 初期化
	void Uninit() override;		// 終了
	void Kill() override;		// 削除
	void Update(const float fDeltaTime, const float fDeltaRate, const float fSlowRate) override;	// 更新
	void Draw() override;		// 描画
	void SetType(const TYPE type) override;					// 種類設定
	void SetEnableDisp(const bool bDisp) override;			// 描画状況設定
	void SetPosition(const MyLib::Vector3& pos) override;	// 位置設定
	void SetRotation(const MyLib::Vector3& rot) override;	// 向き設定

	// 静的メンバ関数
	static CText2D* Create	// 生成
	( // 引数
		const std::string& rFilePath,			// フォントパス
		const bool bItalic,						// イタリック
		const MyLib::Vector3& rPos,				// 原点位置
		const float fCharHeight = 100.0f,		// 文字縦幅
		const float fLineHeight = 100.0f,		// 行間縦幅
		const EAlignX alignX = XALIGN_CENTER,	// 横配置
		const EAlignY alignY = YALIGN_CENTER,	// 縦配置
		const MyLib::Vector3& rRot = VEC3_ZERO,	// 原点向き
		const D3DXCOLOR& rCol = MyLib::color::White()	// 色
	);

	// 仮想関数
	virtual HRESULT PushFrontString(const std::string& rStr);	// 文字列の先頭追加 (マルチバイト文字列)
	virtual HRESULT PushFrontString(const std::wstring& rStr);	// 文字列の先頭追加 (ワイド文字列)
	virtual HRESULT PushBackString(const std::string& rStr);	// 文字列の最後尾追加 (マルチバイト文字列)
	virtual HRESULT PushBackString(const std::wstring& rStr);	// 文字列の最後尾追加 (ワイド文字列)
	virtual void DeleteString(const int nStrIdx);	// 文字列削除
	virtual void DeleteStringAll();					// 文字列全削除

	// メンバ関数
	void SetFont	// フォントの設定
	( // 引数
		const std::string& rFilePath,	// フォントパス
		const bool bItalic = false		// イタリック
	);
	void SetAlpha(const float fAlpha);					// 透明度設定
	void SetColor(const D3DXCOLOR& rCol);				// 色設定
	void SetCharHeight(const float fHeight);			// 文字の縦幅設定
	void SetLineHeight(const float fHeight);			// 行間の縦幅設定
	void SetAlignX(const EAlignX align);				// 横配置設定
	void SetAlignY(const EAlignY align);				// 縦配置設定
	float GetTextWidth() const;							// テキストの横幅取得
	float GetTextHeight() const;						// テキストの縦幅取得
	CString2D* GetString2D(const int nStrIdx) const;	// 文字列の取得
	inline float GetAlpha() const		{ return m_col.a; }			// 透明度取得
	inline D3DXCOLOR GetColor() const	{ return m_col; }			// 色取得
	inline float GetCharHeight() const	{ return m_fCharHeight; }	// 文字の縦幅取得
	inline float GetLineHeight() const	{ return m_fLineHeight; }	// 行間の縦幅取得
	inline EAlignX GetAlignX() const	{ return m_alignX; }		// 横配置取得
	inline EAlignY GetAlignY() const	{ return m_alignY; }		// 縦配置取得
	inline int GetNumString() const		{ return (int)m_listString.size(); }	// 文字列数取得

private:
	// メンバ関数
	CString2D* CreateString2D(const std::wstring& rStr);	// 文字列の生成
	void SetPositionRelative();	// 相対位置設定

	// メンバ変数
	std::list<CString2D*> m_listString;	// 文字列リスト
	CFontChar* m_pFontChar;	// フォント文字
	D3DXCOLOR m_col;		// 色
	EAlignX m_alignX;		// 横配置
	EAlignY m_alignY;		// 縦配置
	float m_fCharHeight;	// 文字の縦幅
	float m_fLineHeight;	// 文字の行間
};

#endif	// _TEXT2D_H_
