//=============================================================================
// 
//  流れる葉っぱヘッダー [leaf_flow.h]
//  Author : 相馬靜雅
// 
//=============================================================================

#ifndef _LEAF_FLOW_H_
#define _LEAF_FLOW_H_	// 二重インクルード防止

#include "leaf.h"

//==========================================================================
// クラス定義
//==========================================================================
// 葉っぱクラス
class CLeafFlow : public CLeaf
{
public:

	//=============================
	// 状態列挙
	//=============================
	enum State
	{
		STATE_FLOW = 0,		// 流れ
		STATE_FADEOUT,		// フェードアウト
		STATE_MAX
	};

	CLeafFlow(int nPriority = 7);
	~CLeafFlow();

	//=============================
	// オーバーライド関数
	//=============================
	HRESULT Init() override;
	void Update() override;

	void SetMoveLen(float len);	// 移動距離設定

private:

	//=============================
	// 関数リスト
	//=============================
	// 状態リスト
	typedef void(CLeafFlow::* STATE_FUNC)();
	static STATE_FUNC m_StateFunc[];

	//=============================
	// メンバ関数
	//=============================
	// 状態系
	void UpdateState();		// 状態更新
	void StateFlow();		// 流れ
	void StateFadeOut();	// フェードアウト

	//=============================
	// メンバ変数
	//=============================
	// 状態系
	float m_fStateTimer;	// 状態カウンター
	State m_state;			// 状態

	// その他
	float m_fMoveLen;	// 移動距離

};


#endif