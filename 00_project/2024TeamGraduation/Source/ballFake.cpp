//==========================================================================
// 
//  利き手表示用ボール処理 [ballFake.cpp]
//  Author : 藤田勇一
// 
//==========================================================================
#include "ballFake.h"

//==========================================================================
// 定数定義
//==========================================================================
namespace
{
	const char*	MODEL = "data\\MODEL\\dadgeball\\dodgeball.x";	// ボールモデル
}

//==========================================================================
// コンストラクタ
//==========================================================================
CBallFake::CBallFake()
{

}

//==========================================================================
// デストラクタ
//==========================================================================
CBallFake::~CBallFake()
{

}

//==========================================================================
// 初期化処理
//==========================================================================
HRESULT CBallFake::Init()
{
	// 親クラスの初期化
	HRESULT hr = CObjectX::Init(MODEL);
	if (FAILED(hr)) { return E_FAIL; }

	return S_OK;
}

//==========================================================================
// 終了処理
//==========================================================================
void CBallFake::Uninit()
{
	// 終了処理
	CBall::Uninit();
}

//==========================================================================
// 削除処理
//==========================================================================
void CBallFake::Kill()
{
	// 削除処理
	CBall::Kill();
}

//==========================================================================
// 更新処理
//==========================================================================
void CBallFake::Update(const float fDeltaTime, const float fDeltaRate, const float fSlowRate)
{
	// 過去の位置保存
	SetOldPosition(GetPosition());

	// 親の更新処理
	CObjectX::Update(fDeltaTime, fDeltaRate, fSlowRate);
}

//==========================================================================
// 描画処理
//==========================================================================
void CBallFake::Draw()
{
	// 描画処理
	CBall::Draw();
}

//==========================================================================
// 生成処理
//==========================================================================
CBallFake *CBallFake::Create()
{
	// メモリの確保
	CBallFake* pObj = DEBUG_NEW CBallFake;
	if (pObj != nullptr)
	{
		// クラスの初期化
		if (FAILED(pObj->Init()))
		{ // 初期化に失敗した場合

			// クラスの終了
			SAFE_UNINIT(pObj);
			return nullptr;
		}
	}

	return pObj;
}
