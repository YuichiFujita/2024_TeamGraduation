//==========================================================================
// 
//  ボール所持マーカー処理 [ballHolderMarker.cpp]
//  Author : 相馬靜雅
// 
//==========================================================================
#include "ballHolderMarker.h"
#include "gameManager.h"

//==========================================================================
// 定数定義
//==========================================================================
namespace
{

}

//==========================================================================
// コンストラクタ
//==========================================================================
CBallHolderMarker::CBallHolderMarker(int nPriority, const LAYER layer) : CObject(nPriority, layer)
{

}

//==========================================================================
// デストラクタ
//==========================================================================
CBallHolderMarker::~CBallHolderMarker()
{

}

//==========================================================================
// 生成処理
//==========================================================================
CBallHolderMarker* CBallHolderMarker::Create(CPlayer* pPlayer)
{
	// メモリの確保
	CBallHolderMarker* pAudience = DEBUG_NEW CBallHolderMarker;

	if (pAudience != nullptr)
	{
		// クラスの初期化
		if (FAILED(pAudience->Init()))
		{ // 初期化に失敗した場合

			// クラスの終了
			SAFE_UNINIT(pAudience);
			return nullptr;
		}
	}

	return pAudience;
}

//==========================================================================
// 初期化処理
//==========================================================================
HRESULT CBallHolderMarker::Init()
{
	// オブジェクトの種類設定
	CObject::SetType(CObject::TYPE::TYPE_OBJECT3D);

	return S_OK;
}

//==========================================================================
// 終了処理
//==========================================================================
void CBallHolderMarker::Uninit()
{
	// オブジェクトの破棄
	Release();
}

//==========================================================================
// 削除処理
//==========================================================================
void CBallHolderMarker::Kill()
{
	// 自身の終了
	Uninit();
}

//==========================================================================
// 更新処理
//==========================================================================
void CBallHolderMarker::Update(const float fDeltaTime, const float fDeltaRate, const float fSlowRate)
{
	
}

//==========================================================================
// 描画処理
//==========================================================================
void CBallHolderMarker::Draw()
{

}
