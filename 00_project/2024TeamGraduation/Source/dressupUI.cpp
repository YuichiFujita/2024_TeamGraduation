//============================================================
//
//	ドレスアップUI処理 [dressupUI.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "dressupUI.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const int PRIORITY = 6;	// ドレスアップUIの優先順位
}

//************************************************************
//	子クラス [CDressupUI] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CDressupUI::CDressupUI() : CObject(PRIORITY, LAYER::LAYER_2D)
{

}

//============================================================
//	デストラクタ
//============================================================
CDressupUI::~CDressupUI()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CDressupUI::Init()
{
	// メンバ変数を初期化


	// 種類の設定
	SetType(CObject::TYPE::TYPE_OBJECT2D);

	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CDressupUI::Uninit()
{
	// オブジェクトを破棄
	Release();
}

//============================================================
//	削除処理
//============================================================
void CDressupUI::Kill()
{
	// 自身の終了
	CDressupUI::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CDressupUI::Update(const float fDeltaTime, const float fDeltaRate, const float fSlowRate)
{
	// 相対位置の設定
	SetPositionRelative();
}

//============================================================
//	描画処理
//============================================================
void CDressupUI::Draw()
{

}

//============================================================
//	種類の設定処理
//============================================================
void CDressupUI::SetType(const TYPE type)
{
	// 自身の種類を設定
	CObject::SetType(type);
}

//============================================================
//	描画状況の設定処理
//============================================================
void CDressupUI::SetEnableDisp(const bool bDraw)
{
	// 自身の描画状況を設定
	CObject::SetEnableDisp(bDraw);
}

//============================================================
//	位置の設定処理
//============================================================
void CDressupUI::SetPosition(const MyLib::Vector3& pos)
{
	// 設定する位置を保存
	CObject::SetPosition(pos);

	// 相対位置の設定
	SetPositionRelative();
}

//============================================================
//	向きの設定処理
//============================================================
void CDressupUI::SetRotation(const MyLib::Vector3& rot)
{
	// 設定する向きを保存
	CObject::SetRotation(rot);

	// 相対位置の設定
	SetPositionRelative();
}

//============================================================
//	生成処理
//============================================================
CDressupUI *CDressupUI::Create
(
	const MyLib::Vector3 &rPos	// 原点位置
)
{
	// ドレスアップUIの生成
	CDressupUI* pDressupUI = DEBUG_NEW CDressupUI;
	if (pDressupUI == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// ドレスアップUIの初期化
		if (FAILED(pDressupUI->Init()))
		{ // 初期化に失敗した場合

			// ドレスアップUIの破棄
			SAFE_DELETE(pDressupUI);
			return nullptr;
		}

		// 原点位置を設定
		pDressupUI->SetPosition(rPos);

		// 確保したアドレスを返す
		return pDressupUI;
	}
}

//============================================================
//	相対位置の設定処理
//============================================================
void CDressupUI::SetPositionRelative()
{

}
