//=============================================================================
// 
// モテマネージャ処理 [charmManager.cpp]
// Author : 相馬靜雅
// 
//=============================================================================
#include "charmManager.h"
#include "manager.h"

//==========================================================================
// 定数定義
//==========================================================================
namespace
{
	const float ADDVALUE[CCharmManager::ETypeAdd::ADD_MAX] =	// 加算量
	{
		2.0f,	// ヒット
		5.0f,	// ジャストキャッチ
		2.0f,	// カバーキャッチ
		8.0f,	// 回避
		30.0f,	// スペシャル
	};

	const float SUBVALUE[CCharmManager::ETypeSub::SUB_MAX] =	// 減算量
	{
		1.0f,	// ライン越えて戻ってる最中にあたる
		4.0f,	// 端に逃げまくる
		3.0f,	// 走っていってライン越え(ボール所持)
		6.0f,	// ずっとボール持って投げない
	};
}

//==========================================================================
// 静的メンバ変数
//==========================================================================
CCharmManager* CCharmManager::m_pThisPtr = nullptr;	// 自身のポインタ

//==========================================================================
// コンストラクタ
//==========================================================================
CCharmManager::CCharmManager()
{
	
}

//==========================================================================
// デストラクタ
//==========================================================================
CCharmManager::~CCharmManager()
{

}

//==========================================================================
// 生成処理
//==========================================================================
CCharmManager* CCharmManager::Create()
{
	if (m_pThisPtr != nullptr)
	{// 既にある場合
		return m_pThisPtr;
	}

	// メモリの確保
	m_pThisPtr = DEBUG_NEW CCharmManager;

	if (m_pThisPtr != nullptr)
	{
		// 初期化処理
		m_pThisPtr->Init();
	}

	return m_pThisPtr;
}

//==========================================================================
// 初期化処理
//==========================================================================
HRESULT CCharmManager::Init()
{
	for (int i = 0; i < CCharmManager::ETypeAdd::ADD_MAX; i++)
	{
		m_fAddValue[i] = ADDVALUE[i];
	}
	
	for (int i = 0; i < CCharmManager::ETypeSub::SUB_MAX; i++)
	{
		m_fSubValue[i] = SUBVALUE[i];
	}

	return S_OK;
}

//==========================================================================
// 終了処理
//==========================================================================
void CCharmManager::Uninit()
{
	delete m_pThisPtr;
	m_pThisPtr = nullptr;
}

//==========================================================================
// 加算量取得
//==========================================================================
float CCharmManager::GetAddValue(ETypeAdd type)
{
	// 範囲外
	if (ETypeAdd::ADD_MAX <= type) return 0.0f;

	return m_fAddValue[type];
}

//==========================================================================
// 加算量取得
//==========================================================================
float CCharmManager::GetSubValue(ETypeSub type)
{
	// 範囲外
	if (ETypeSub::SUB_MAX <= type) return 0.0f;

	return m_fSubValue[type];
}
