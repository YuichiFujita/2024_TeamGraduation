//=============================================================================
// 
//  転移ビーコン処理 [transferBeacon.cpp]
//  Author : 相馬靜雅
// 
//=============================================================================
#include "gymWallManager.h"
#include "manager.h"
#include "calculation.h"
#include "gymWall.h"
#include "specialManager.h"

//==========================================================================
// 定数定義
//==========================================================================
namespace
{
	
}

//==========================================================================
// 静的メンバ変数
//==========================================================================


//==========================================================================
// コンストラクタ
//==========================================================================
CGymWallManager::CGymWallManager(int nPriority) : CObject(nPriority)
{
	// 値のクリア
	m_pGymWall = nullptr;
	m_bWall = false;
}

//==========================================================================
// デストラクタ
//==========================================================================
CGymWallManager::~CGymWallManager()
{
	
}

//==========================================================================
// 生成処理
//==========================================================================
CGymWallManager *CGymWallManager::Create()
{
	// メモリの確保
	CGymWallManager* pObj = DEBUG_NEW CGymWallManager;

	if (pObj != nullptr)
	{
		// 初期化処理
		pObj->Init();
	}

	return pObj;
}

//==========================================================================
// 初期化処理
//==========================================================================
HRESULT CGymWallManager::Init()
{
	// 種類をマネージャーにする
	SetType(CObject::TYPE::TYPE_MANAGER);

	return S_OK;
}

//==========================================================================
// 終了処理
//==========================================================================
void CGymWallManager::Uninit()
{

}

//==========================================================================
// 削除
//==========================================================================
void CGymWallManager::Kill()
{

}

//==========================================================================
// 更新処理
//==========================================================================
void CGymWallManager::Update(const float fDeltaTime, const float fDeltaRate, const float fSlowRate)
{
	// 壁の状態
	State();
}

//==========================================================================
// 描画処理
//==========================================================================
void CGymWallManager::Draw()
{

}

//==========================================================================
// 
//==========================================================================
void CGymWallManager::State()
{
	if (!m_bWall)
	{
		if (m_pGymWall)
		{// 削除
			m_pGymWall->Kill();
			m_pGymWall = nullptr;
		}
	}
	else
	{
		if (!m_pGymWall)
		{// 生成
			m_pGymWall = CGymWall::Create();
		}
	}
}
