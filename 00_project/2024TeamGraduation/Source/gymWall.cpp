//=============================================================================
// 
//  転移ビーコン処理 [transferBeacon.cpp]
//  Author : 相馬靜雅
// 
//=============================================================================
#include "gymWall.h"
#include "manager.h"
#include "calculation.h"

//==========================================================================
// 定数定義
//==========================================================================
namespace
{
	const char* MODEL = "data\\MODEL\\gym\\3D_Gym_Wall.x";
}

//==========================================================================
// 関数ポインタ
//==========================================================================
CGymWall::SAMPLE_FUNC CGymWall::m_SampleFuncList[] =
{
	&CGymWall::SampleWho,	// フー
	&CGymWall::SampleWao,	// ワオ
};

//==========================================================================
// 静的メンバ変数
//==========================================================================
CListManager<CGymWall> CGymWall::m_List = {};	// リスト

//==========================================================================
// コンストラクタ
//==========================================================================
CGymWall::CGymWall(int nPriority) : CObjectX(nPriority)
{
	// 値のクリア
	m_fStateTime = 0.0f;	// 状態カウンター
	m_state = SAMPLE_WAO;	// 状態
}

//==========================================================================
// デストラクタ
//==========================================================================
CGymWall::~CGymWall()
{
	
}

//==========================================================================
// 生成処理
//==========================================================================
CGymWall *CGymWall::Create()
{
	// メモリの確保
	CGymWall* pObj = DEBUG_NEW CGymWall;

	if (pObj != nullptr)
	{
		// 初期化処理
		pObj->Init();
	}

	return pObj;
}

//==========================================================================
// 初期化処理
//==========================================================================
HRESULT CGymWall::Init()
{
	// リストに追加
	m_List.Regist(this);

	// 種類の設定
	CObject::SetType(TYPE_OBJECTX);

	// 初期化処理
	HRESULT hr = CObjectX::Init(MODEL);
	if (FAILED(hr))
	{
		return E_FAIL;
	}

	return S_OK;
}

//==========================================================================
// 終了処理
//==========================================================================
void CGymWall::Uninit()
{
	
	// リストから削除
	m_List.Delete(this);

	// 終了処理
	CObjectX::Uninit();
}

//==========================================================================
// 削除
//==========================================================================
void CGymWall::Kill()
{
	
	// リストから削除
	m_List.Delete(this);

	// 終了処理
	CObjectX::Uninit();
}

//==========================================================================
// 更新処理
//==========================================================================
void CGymWall::Update(const float fDeltaTime, const float fDeltaRate, const float fSlowRate)
{
	// 状態カウンター加算
	m_fStateTime += fDeltaTime * fSlowRate;

	// 状態別処理
	(this->*(m_SampleFuncList[m_state]))();

}

//==========================================================================
// フー
//==========================================================================
void CGymWall::SampleWho()
{
	
}

//==========================================================================
// ワオ
//==========================================================================
void CGymWall::SampleWao()
{

}

//==========================================================================
// 描画処理
//==========================================================================
void CGymWall::Draw()
{
	// 描画
	CObjectX::Draw();
}

