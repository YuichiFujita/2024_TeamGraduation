//==========================================================================
// 
//  チュートリアル画面処理 [tutorialscreen.cpp]
//  Author : 相馬靜雅
// 
//==========================================================================
//==========================================================================
// インクルードファイル
//==========================================================================
#include "tutorialscreen.h"
#include "manager.h"
#include "input.h"

//==========================================================================
// 定数定義
//==========================================================================
namespace
{
	const std::string TEXTURE = "data\\TEXTURE\\entry\\Arrow_Twin_Team.png";	// テクスチャ
	const float DISTANCE_SELECTMOVE = 15.0f;	// 選択時移動量
	const float VALUE_FLOAT = 3.0f;				// ふわふわ量
}

//==========================================================================
//	コンストラクタ
//==========================================================================
CTutorialScreen::CTutorialScreen(int nPriority) : CObject2D(nPriority)
{

}

//==========================================================================
//	デストラクタ
//==========================================================================
CTutorialScreen::~CTutorialScreen()
{

}

//==========================================================================
// 生成処理
//==========================================================================
CTutorialScreen* CTutorialScreen::Create()
{
	// メモリの確保
	CTutorialScreen* pObj = DEBUG_NEW CTutorialScreen();

	if (pObj != nullptr)
	{
		// クラスの初期化
		if (FAILED(pObj->Init()))
		{ // 初期化に失敗した場合
			SAFE_UNINIT(pObj);
			return nullptr;
		}
	}

	return pObj;
}

//==========================================================================
//	初期化処理
//==========================================================================
HRESULT CTutorialScreen::Init()
{
	// 種類をオブジェクト2Dにする
	SetType(CObject::TYPE::TYPE_OBJECT2D);

	// テクスチャの割当
	CTexture* pTexture = CTexture::GetInstance();
	int nTexID = pTexture->Regist(TEXTURE);
	BindTexture(nTexID);

	// 頂点情報設定
	SetVtx();

	return S_OK;
}

//==========================================================================
//	終了処理
//==========================================================================
void CTutorialScreen::Uninit()
{
	// オブジェクトを破棄
	Release();
}

//==========================================================================
//	削除処理
//==========================================================================
void CTutorialScreen::Kill()
{
	// 自身の終了
	CTutorialScreen::Uninit();
}

//==========================================================================
//	更新処理
//==========================================================================
void CTutorialScreen::Update(const float fDeltaTime, const float fDeltaRate, const float fSlowRate)
{
	
}
