//============================================================
//
//	弾処理 [bullet.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "bullet.h"

//************************************************************
//	静的メンバ変数宣言
//************************************************************
CListManager<CBullet> *CBullet::m_pList = nullptr;	// オブジェクトリスト

//************************************************************
//	子クラス [CBullet] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CBullet::CBullet() : CObject3D(CObject::LABEL_BULLET),
	m_move		(VEC3_ZERO),	// 移動量
	m_fCurTime	(0.0f)			// 経過時間
{

}

//============================================================
//	デストラクタ
//============================================================
CBullet::~CBullet()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CBullet::Init(void)
{
	// メンバ変数を初期化
	m_move = VEC3_ZERO;	// 移動量
	m_fCurTime = 0.0f;	// 経過時間

	// オブジェクト3Dの初期化
	if (FAILED(CObject3D::Init()))
	{ // 初期化に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	SetVec3Sizing(D3DXVECTOR3(20.0f, 20.0f, 0.0f));

	if (m_pList == nullptr)
	{ // リストマネージャーが存在しない場合

		// リストマネージャーの生成
		m_pList = CListManager<CBullet>::Create();
		if (m_pList == nullptr)
		{ // 生成に失敗した場合

			// 失敗を返す
			assert(false);
			return E_FAIL;
		}
	}

	// リストに自身のオブジェクトを追加・イテレーターを取得
	m_iterator = m_pList->AddList(this);

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CBullet::Uninit(void)
{
	// リストから自身のオブジェクトを削除
	m_pList->DelList(m_iterator);

	if (m_pList->GetNumAll() == 0)
	{ // オブジェクトが一つもない場合

		// リストマネージャーの破棄
		m_pList->Release(m_pList);
	}

	// オブジェクト3Dの終了
	CObject3D::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CBullet::Update(const float fDeltaTime)
{
	// 重力を与える
	m_move.y -= 0.35f;

	// 位置を移動させる
	SetVec3Position(GetVec3Position() + m_move);

	// 時間経過
	m_fCurTime += fDeltaTime;
	if (m_fCurTime > 4.0f)
	{ // 寿命が来た場合

		// 自身の終了
		Uninit();
		return;
	}

	// オブジェクト3Dの更新
	CObject3D::Update(fDeltaTime);
}

//============================================================
//	描画処理
//============================================================
void CBullet::Draw(CShader *pShader)
{
	// オブジェクト3Dの描画
	CObject3D::Draw(pShader);
}

//============================================================
//	生成処理
//============================================================
CBullet *CBullet::Create(const D3DXVECTOR3& rPos, const D3DXVECTOR3& rMove)
{
	// 弾の生成
	CBullet *pBullet = new CBullet;
	if (pBullet == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// 弾の初期化
		if (FAILED(pBullet->Init()))
		{ // 初期化に失敗した場合

			// 弾の破棄
			SAFE_DELETE(pBullet);
			return nullptr;
		}

		// 位置を設定
		pBullet->SetVec3Position(rPos);

		// 移動量を設定
		pBullet->m_move = rMove;

		// 確保したアドレスを返す
		return pBullet;
	}
}

//============================================================
//	リスト取得処理
//============================================================
CListManager<CBullet> *CBullet::GetList(void)
{
	// オブジェクトリストを返す
	return m_pList;
}
